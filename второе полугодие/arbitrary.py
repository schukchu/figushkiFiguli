#2                            
for x in range(2):
   for y in range(2):
      for z in range(2):
         for w in range(2): - Полный перебор при котором рассматриваем каждое соответствие 
            if (not(y<=x) or (z<=w) or not(z))==False:
              - дописать что всё значит
#5
for i in range(1,100):    - Перебор
chislo=''                 - Создание пустой строки     
num=(bin(i)[2:])          - Перевод числа из цикла в двоичный код          
if num.count('1')%2==0:   - Проверка, кратно ли количество единиц в числе
  chislo='10'+num[2:]+'0' - Составление строки со срезанными первыми двумя цифрами
  break                   - Выход из цикла
  
#6
from turtle import *      - Активация модуля turtle
forward(90)               - Поворот на градусную меру
pu()                      - Поднятие пера
for x in range(1,9):      
    for y in range(1,10):
        goto(x*30,y*30)
        dot(2)            - Проставление точек с заданными координатами
done()                    - Окончание работы turtle

#8
from itertools import product  - Активация product из модуля itertools
p = product("АБВ", repeat = 4) - Создание всех возможных комбинаций из символов "АБВ", из 4 символов
for a in p:                    - Перебор по каждой комбинации
  
#12  
cod = str("8"*86)                                    - Создание строки из заданного повторения некоторой последовательности символов
while cod.count("8888")>=1 or cod.count("1111")>=1:  - Проверка что в строке ещё остались последовательности цифр, которые можно заменить
    if cod.count("1111")>=1:                         - Проверка что в строке ещё остались "1111", которые можно заменить
        cod = cod.replace("1111", "8", 1)            - Замена символов в строке
    else:
        cod = cod.replace("8888", "11", 1)           - Порядок имеет значение
  
pass;     - Заглушка, применяется когда нужно заткнуть недоделанные ветвления
break;    - Выход из цикла
continue; - Переход на следующие итерацию цикла
list()    - Функция преобразует аргумент в список

#14
while schlon != 0:                  - Ведём операции пока schlon не шлёпнется в 0
    low = low + (schlon % 4 == 3)   - Подсчёт сколько порядков числа schlon в четверичной записи кратны 3
    schlon = schlon // 4            - Переводим schlon в четверичную степень порядок за порядком
    
#15    
surplus = 8 + 3 * 15 + 5 * 15 * 15 + 2 * 15 * 15 * 15 + 2 * 15 * 15 * 15 * 15
addict = x * 15 + x * 15 * 15 * 15  - Разбивка числа по порядкам на сумму произведений
if (addict + surplus) % 14 == 0:    - Проверка кратности числа
   print((addict + surplus)/14)     - Выведение числа, составленного из двух перменных, над суммой которых была совершена операция
    
#16

#17
    
#23

#24    
with open ('24.txt') as f:
    lot = f.readline.replace('C', 'G').replace('F', 'G').replace('A', 'O').replace('E', 'O').replace('GO', '*')  - Через серию замен все интерусующие нас комбинации
    for i in lot:           - Для каждой строки .txt файла                                                         превращаем в 'GO'
      if i =='*':           - Смотрим по '*' в каждой строке
        
#25        
for i in range (2023, 10**10, 2023): - перебор с шагом
    num = str(i)                                        - перекладка числа в строку
    if num [0] == '1' and num [2:6] == '2139' and num [-1] == '4': - проверка числа на соответствие маске
      
#26
with open('26.txt') as f:
    data=[int(x) for x inf]
    li=sorted(s[1:],reverse=True)
    k = 1
    mel = li[0]
    for i in range(1,len(li)):
        if li[i]+3 <= mel:
            mel = li[i]
            k+=1
print(k,mel)
      
